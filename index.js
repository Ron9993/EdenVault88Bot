const { Telegraf, Markup } = require('telegraf');
const config = require('./config.json'); // Includes BOT_TOKEN and CHANNEL_ID

const bot = new Telegraf(config.BOT_TOKEN);

// Caption messages in 3 languages
const messages = {
  en: `Welcome to EdenVault ‚Äì Your Personal Digital Agent

Looking for the best deals on VPNs, subscriptions, gift cards, game top-ups, accounts, or social media growth?

EdenVault is your go-to assistant for all things digital ‚Äî fast, secure, and reliable.

We offer:
- üîí VPN Services ‚Äì Top-tier privacy & protection
- üßæ Subscriptions ‚Äì Netflix, Spotify, YouTube, ChatGPT & more
- üéÆ Game Top-Ups ‚Äì Fast, safe, multi-platform credits
- üéÅ Gift Cards ‚Äì Local & international options
- üë§ Accounts ‚Äì Email, social media, digital platforms
- üöÄ Social Media Boost ‚Äì Real engagement, real growth

No bots. No hassle. Just real support, real service.

EdenVault ‚Äì Your digital life, delivered.`,

  my: `EdenVault ‚Äì ·Äû·ÄÑ·Ä∑·Ä∫·Ä°·Äê·ÄΩ·ÄÄ·Ä∫ ·Äö·ÄØ·Ä∂·ÄÄ·Äº·Ää·Ä∫·ÄÖ·Ä≠·Äê·Ä∫·ÄÅ·Äª·Äõ·Äû·Ä±·Ä¨ ·Äí·ÄÖ·Ä∫·ÄÇ·Äª·ÄÖ·Ä∫·Äê·Äö·Ä∫·Äù·Äî·Ä∫·ÄÜ·Ä±·Ä¨·ÄÑ·Ä∫·Äô·Äæ·ÄØ·Äï·Ä∂·Ä∑·Äï·Ä≠·ÄØ·Ä∏·Äû·Ä∞

VPN·Åä subscription·Åä gift card·Åä game top-up·Åä account ·Äî·Äæ·ÄÑ·Ä∑·Ä∫ SMM panel ·Äù·Äî·Ä∫·ÄÜ·Ä±·Ä¨·ÄÑ·Ä∫·Äô·Äæ·ÄØ·Äô·Äª·Ä¨·Ä∏·ÄÄ·Ä≠·ÄØ ·Äö·Äæ·Äâ·Ä∫·Äï·Äº·Ä≠·ÄØ·ÄÑ·Ä∫·Äî·Ä≠·ÄØ·ÄÑ·Ä∫·Äû·Ä±·Ä¨·ÄÖ·Äª·Ä±·Ä∏·Äî·Äæ·ÄØ·Äî·Ä∫·Ä∏·Äñ·Äº·ÄÑ·Ä∑·Ä∫ ·Äõ·Äæ·Ä¨·Äñ·ÄΩ·Ä±·Äî·Ä±·Äï·Ä´·Äû·Äú·Ä¨·Ä∏?

EdenVault ·Äû·Ää·Ä∫ ·Äû·ÄÑ·Ä∑·Ä∫·Äí·ÄÖ·Ä∫·ÄÇ·Äª·ÄÖ·Ä∫·Äê·Äö·Ä∫·Äú·Ä≠·ÄØ·Ä°·Äï·Ä∫·ÄÅ·Äª·ÄÄ·Ä∫·Äô·Äª·Ä¨·Ä∏·Ä°·Äê·ÄΩ·ÄÄ·Ä∫ ·Äö·ÄØ·Ä∂·ÄÄ·Äº·Ää·Ä∫·ÄÖ·Ä≠·Äê·Ä∫·ÄÅ·Äª·Äõ·Äï·Äº·ÄÆ·Ä∏ ·ÄÄ·Äª·ÄΩ·Äô·Ä∫·Ä∏·ÄÄ·Äª·ÄÑ·Ä∫·Äû·Ä±·Ä¨ ·Äù·Äî·Ä∫·ÄÜ·Ä±·Ä¨·ÄÑ·Ä∫·Äô·Äæ·ÄØ·Äï·Ä∂·Ä∑·Äï·Ä≠·ÄØ·Ä∏·Äû·Ä∞·Äñ·Äº·ÄÖ·Ä∫·Äï·Ä´·Äû·Ää·Ä∫·Åã

·ÄÄ·Äª·ÄΩ·Äî·Ä∫·ÄØ·Äï·Ä∫·Äê·Ä≠·ÄØ·Ä∑·Åè ·Äù·Äî·Ä∫·ÄÜ·Ä±·Ä¨·ÄÑ·Ä∫·Äô·Äæ·ÄØ·Äô·Äª·Ä¨·Ä∏:

üîí VPN ·Äù·Äî·Ä∫·ÄÜ·Ä±·Ä¨·ÄÑ·Ä∫·Äô·Äæ·ÄØ ‚Äì ·Ä°·ÄÜ·ÄÑ·Ä∑·Ä∫·Äô·Äº·ÄÑ·Ä∑·Ä∫·Äú·ÄØ·Ä∂·ÄÅ·Äº·ÄØ·Ä∂·Äõ·Ä±·Ä∏·Ä°·Ä¨·Äô·ÄÅ·Ä∂
üßæ Subscription ‚Äì Netflix, Spotify, YouTube ·Äî·Äæ·ÄÑ·Ä∑·Ä∫ ·Ä°·ÄÅ·Äº·Ä¨·Ä∏·Äô·Äª·Ä¨·Ä∏
üéÆ Game Top-Up ‚Äì ·Äú·Äª·ÄÑ·Ä∫·Äô·Äº·Äî·Ä∫·Äï·Äº·ÄÆ·Ä∏ ·Äö·ÄØ·Ä∂·ÄÄ·Äº·Ää·Ä∫·ÄÖ·Ä≠·Äê·Ä∫·ÄÅ·Äª·Äõ·Äû·Ä±·Ä¨
üéÅ Gift Card ·Äô·Äª·Ä¨·Ä∏ ‚Äì ·Äï·Äº·Ää·Ä∫·Äê·ÄΩ·ÄÑ·Ä∫·Ä∏·Äî·Äæ·ÄÑ·Ä∑·Ä∫·Äï·Äº·Ää·Ä∫·Äï ·Äõ·ÄΩ·Ä±·Ä∏·ÄÅ·Äª·Äö·Ä∫·ÄÖ·Äõ·Ä¨·Äô·Äª·Ä¨·Ä∏·ÄÖ·ÄΩ·Ä¨
üë§ Account ·Äù·Äî·Ä∫·ÄÜ·Ä±·Ä¨·ÄÑ·Ä∫·Äô·Äæ·ÄØ·Äô·Äª·Ä¨·Ä∏ ‚Äì Email, Social Media ·Äô·Äª·Ä¨·Ä∏
üöÄ SMM Panel ‚Äì Social Media Marketing ·Ä°·Äê·ÄΩ·ÄÄ·Ä∫ ·Äï·Äº·ÄÆ·Ä∏·Äï·Äº·Ää·Ä∑·Ä∫·ÄÖ·ÄØ·Ä∂·Äû·Ä±·Ä¨·Äù·Äî·Ä∫·ÄÜ·Ä±·Ä¨·ÄÑ·Ä∫·Äô·Äæ·ÄØ

EdenVault ‚Äì ·Äû·ÄÑ·Ä∑·Ä∫·Äí·ÄÖ·Ä∫·ÄÇ·Äª·ÄÖ·Ä∫·Äê·Äö·Ä∫·Ä°·Äê·ÄΩ·Ä±·Ä∑·Ä°·ÄÄ·Äº·ÄØ·Ä∂·ÄÄ·Ä≠·ÄØ ·Äô·Äº·Äæ·ÄÑ·Ä∑·Ä∫·Äê·ÄÑ·Ä∫·Äï·Ä±·Ä∏·Äï·Ä´·Äû·Ää·Ä∫·Åã`,

  zh: `Ê¨¢ËøéÊù•Âà∞ EdenVault ‚Äì ÊÇ®ÁöÑÁßÅ‰∫∫Êï∞Â≠óÂä©Êâã

ÊÉ≥Ë¶ÅÂØªÊâæÊúÄ‰ºòÊÉ†ÁöÑ VPN„ÄÅËÆ¢ÈòÖ„ÄÅÁ§ºÂìÅÂç°„ÄÅÊ∏∏ÊàèÂÖÖÂÄº„ÄÅË¥¶Âè∑ÊàñÁ§æ‰∫§Â™í‰ΩìÂ¢ûÈïøÊúçÂä°Ôºü

EdenVault ÊòØÊÇ®ÁöÑ‰∏ÄÁ´ôÂºèÊï∞Â≠óÊúçÂä°Âä©Êâã ‚Äì Âø´ÈÄü„ÄÅÂÆâÂÖ®„ÄÅÂèØÈù†„ÄÇ

Êàë‰ª¨Êèê‰æõÔºö
- üîí VPN ÊúçÂä° ‚Äì È°∂Á∫ßÈöêÁßÅÂíå‰øùÊä§
- üßæ ËÆ¢ÈòÖÊúçÂä° ‚Äì Netflix„ÄÅSpotify„ÄÅYouTube„ÄÅChatGPT Á≠â
- üéÆ Ê∏∏ÊàèÂÖÖÂÄº ‚Äì Â§öÂπ≥Âè∞„ÄÅÂø´ÈÄü„ÄÅÂÆâÂÖ®
- üéÅ Á§ºÂìÅÂç° ‚Äì Êú¨Âú∞ÂèäÂõΩÈôÖÈÄâÈ°π
- üë§ Ë¥¶Âè∑ÊúçÂä° ‚Äì ÈÇÆÁÆ±„ÄÅÁ§æ‰∫§Â™í‰Ωì„ÄÅÂêÑÁ±ªÂπ≥Âè∞
- üöÄ Á§æ‰∫§Â™í‰ΩìÂ¢ûÈïø ‚Äì ÁúüÂÆû‰∫íÂä®ÔºåÁúüÂÆûÂ¢ûÈïø

Êó†Êú∫Âô®‰∫∫ÔºåÊó†ÁÉ¶ÊÅºÔºåÂè™ÊúâÁúüÂÆûÊúçÂä°„ÄÇ

EdenVault ‚Äì ÊÇ®ÁöÑÊï∞Â≠óÁîüÊ¥ªÔºåÂ∑≤ÈÄÅËææ„ÄÇ`
};

// Function to return inline keyboard
const getButtons = (showLangRow = false) => {
  const buttons = [
    [
      Markup.button.url("üîí VPN", "https://t.me/Edenvpn"),
      Markup.button.url("üßæ Subscription", "https://t.me/EdenSubs")
    ],
    [
      Markup.button.url("üéÅ Gift Cards", "https://t.me/EdenGiftCard"),
      Markup.button.url("üéÆ Game Topup", "https://t.me/EdenGTopup")
    ],
    [
      Markup.button.url("üöÄ Social Media Boost", "https://t.me/EdenSMB"),
      Markup.button.url("üë§ Accounts", "https://t.me/EDENAccount")
    ]
  ];

  if (showLangRow) {
    buttons.push([
      Markup.button.callback("üá¨üáß English", "lang_en"),
      Markup.button.callback("üá®üá≥ ‰∏≠Êñá", "lang_zh"),
      Markup.button.callback("üá≤üá≤ ·Äô·Äº·Äî·Ä∫·Äô·Ä¨", "lang_my")
    ]);
  }

  buttons.push([
    Markup.button.callback("üåê Language / ËØ≠Ë®Ä / ·Äò·Ä¨·Äû·Ä¨", showLangRow ? "lang_hide" : "lang_menu")
  ]);

  return Markup.inlineKeyboard(buttons);
};

// Command: /start - Test the bot
bot.start(async (ctx) => {
  try {
    await ctx.replyWithPhoto("https://i.imgur.com/iQxLLCB.png", {
      caption: "ü§ñ **EdenVault Bot Test**\n\nBot is working! Use /post to send a message to the channel.",
      parse_mode: "Markdown",
      reply_markup: getButtons(false).reply_markup
    });
    console.log("‚úÖ /start command used");
  } catch (err) {
    console.error("‚ùå Error in /start:", err.message);
    await ctx.reply("‚ùå Error testing bot.");
  }
});

// Command: /post - Send post to channel
bot.command('post', async (ctx) => {
  try {
    await bot.telegram.sendPhoto(config.CHANNEL_ID, "https://i.imgur.com/iQxLLCB.png", {
      caption: messages.en,
      parse_mode: "Markdown",
      reply_markup: getButtons(false).reply_markup
    });

    await ctx.reply("‚úÖ Posted to NOVORAHoldings channel!");
    console.log("‚úÖ Channel post sent via /post command");
  } catch (err) {
    console.error("‚ùå Error posting:", err.message);
    await ctx.reply("‚ùå Failed to post to channel.");
  }
});

// Step 2: Toggle language button row
bot.action("lang_menu", async (ctx) => {
  try {
    await ctx.editMessageReplyMarkup(getButtons(true).reply_markup);
    await ctx.answerCbQuery();
  } catch (err) {
    console.error("‚ùå Error showing lang row:", err.message);
    await ctx.answerCbQuery("‚ùå Failed to open language options.");
  }
});

bot.action("lang_hide", async (ctx) => {
  try {
    await ctx.editMessageReplyMarkup(getButtons(false).reply_markup);
    await ctx.answerCbQuery();
  } catch (err) {
    console.error("‚ùå Error hiding lang row:", err.message);
    await ctx.answerCbQuery("‚ùå Failed to hide language options.");
  }
});

// Step 3: Change language caption
bot.action(/lang_(.+)/, async (ctx) => {
  const lang = ctx.match[1];
  const newCaption = messages[lang];
  const msg = ctx.callbackQuery.message;

  try {
    await ctx.telegram.editMessageMedia(
      msg.chat.id,
      msg.message_id,
      undefined,
      {
        type: "photo",
        media: "https://i.imgur.com/iQxLLCB.png",
        caption: newCaption,
        parse_mode: "Markdown"
      },
      {
        reply_markup: getButtons(true).reply_markup
      }
    );
    await ctx.answerCbQuery(`‚úÖ Language set`);
    console.log(`‚úÖ Language changed to ${lang}`);
  } catch (err) {
    console.error("‚ùå Failed to change language:", err.message);
    await ctx.answerCbQuery("‚ùå Language switch failed");
  }
});

bot.launch();
console.log("‚úÖ EdenVault multilingual bot with inline Language toggle is live!");
